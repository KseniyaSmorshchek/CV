{"ast":null,"code":"// reducers.js\n\nimport { SET_USER, ADD_NOTE, EDIT_NOTE, DELETE_NOTE, SET_ERROR, CLEAR_ERROR, SET_LOADING, FETCH_NOTE_DATA // Добавляем FETCH_NOTE_DATA\n} from './actions';\nconst initialState = {\n  user: null,\n  notes: [],\n  error: null,\n  isLoading: false\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case ADD_NOTE:\n      return {\n        ...state,\n        notes: [...state.notes, action.payload]\n      };\n    case EDIT_NOTE:\n      const updatedNotes = state.notes.map(note => note.id === action.payload.id ? {\n        ...note,\n        ...action.payload.updatedNoteData\n      } : note);\n      return {\n        ...state,\n        notes: updatedNotes\n      };\n    case DELETE_NOTE:\n      const filteredNotes = state.notes.filter(note => note.id !== action.payload);\n      return {\n        ...state,\n        notes: filteredNotes\n      };\n    case SET_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    case CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case FETCH_NOTE_DATA:\n      const {\n        noteId,\n        noteData\n      } = action.payload; // Предположим, что action.payload содержит id и данные заметки\n      const updatedNotesForFetch = state.notes.map(note => note.id === noteId ? {\n        ...note,\n        ...noteData\n      } : note);\n      return {\n        ...state,\n        notes: updatedNotesForFetch\n      };\n    default:\n      return state;\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["SET_USER","ADD_NOTE","EDIT_NOTE","DELETE_NOTE","SET_ERROR","CLEAR_ERROR","SET_LOADING","FETCH_NOTE_DATA","initialState","user","notes","error","isLoading","rootReducer","state","action","type","payload","updatedNotes","map","note","id","updatedNoteData","filteredNotes","filter","noteId","noteData","updatedNotesForFetch"],"sources":["/Users/markvadimov/Desktop/bsu/react/notion/src/redux/reducers.js"],"sourcesContent":["// reducers.js\n\nimport {\n          SET_USER,\n          ADD_NOTE,\n          EDIT_NOTE,\n          DELETE_NOTE,\n          SET_ERROR,\n          CLEAR_ERROR,\n          SET_LOADING,\n          FETCH_NOTE_DATA, // Добавляем FETCH_NOTE_DATA\n        } from './actions';\n        \n        const initialState = {\n          user: null,\n          notes: [],\n          error: null,\n          isLoading: false,\n        };\n        \n        const rootReducer = (state = initialState, action) => {\n          switch (action.type) {\n            case SET_USER:\n              return {\n                ...state,\n                user: action.payload,\n              };\n            case ADD_NOTE:\n              return {\n                ...state,\n                notes: [...state.notes, action.payload],\n              };\n            case EDIT_NOTE:\n              const updatedNotes = state.notes.map((note) =>\n                note.id === action.payload.id ? { ...note, ...action.payload.updatedNoteData } : note\n              );\n        \n              return {\n                ...state,\n                notes: updatedNotes,\n              };\n            case DELETE_NOTE:\n              const filteredNotes = state.notes.filter((note) => note.id !== action.payload);\n        \n              return {\n                ...state,\n                notes: filteredNotes,\n              };\n            case SET_ERROR:\n              return {\n                ...state,\n                error: action.payload,\n              };\n            case CLEAR_ERROR:\n              return {\n                ...state,\n                error: null,\n              };\n            case SET_LOADING:\n              return {\n                ...state,\n                isLoading: action.payload,\n              };\n              case FETCH_NOTE_DATA:\n                    const { noteId, noteData } = action.payload; // Предположим, что action.payload содержит id и данные заметки\n                    const updatedNotesForFetch = state.notes.map((note) =>\n                      note.id === noteId ? { ...note, ...noteData } : note\n                    );\n                  \n                    return {\n                      ...state,\n                      notes: updatedNotesForFetch,\n                    };\n            default:\n              return state;\n          }\n        };\n        \n        export default rootReducer;\n        "],"mappings":"AAAA;;AAEA,SACUA,QAAQ,EACRC,QAAQ,EACRC,SAAS,EACTC,WAAW,EACXC,SAAS,EACTC,WAAW,EACXC,WAAW,EACXC,eAAe,CAAE;AAAA,OACZ,WAAW;AAElB,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKhB,QAAQ;MACX,OAAO;QACL,GAAGc,KAAK;QACRL,IAAI,EAAEM,MAAM,CAACE;MACf,CAAC;IACH,KAAKhB,QAAQ;MACX,OAAO;QACL,GAAGa,KAAK;QACRJ,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAK,EAAEK,MAAM,CAACE,OAAO;MACxC,CAAC;IACH,KAAKf,SAAS;MACZ,MAAMgB,YAAY,GAAGJ,KAAK,CAACJ,KAAK,CAACS,GAAG,CAAEC,IAAI,IACxCA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAACI,EAAE,GAAG;QAAE,GAAGD,IAAI;QAAE,GAAGL,MAAM,CAACE,OAAO,CAACK;MAAgB,CAAC,GAAGF,IACnF,CAAC;MAED,OAAO;QACL,GAAGN,KAAK;QACRJ,KAAK,EAAEQ;MACT,CAAC;IACH,KAAKf,WAAW;MACd,MAAMoB,aAAa,GAAGT,KAAK,CAACJ,KAAK,CAACc,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACE,OAAO,CAAC;MAE9E,OAAO;QACL,GAAGH,KAAK;QACRJ,KAAK,EAAEa;MACT,CAAC;IACH,KAAKnB,SAAS;MACZ,OAAO;QACL,GAAGU,KAAK;QACRH,KAAK,EAAEI,MAAM,CAACE;MAChB,CAAC;IACH,KAAKZ,WAAW;MACd,OAAO;QACL,GAAGS,KAAK;QACRH,KAAK,EAAE;MACT,CAAC;IACH,KAAKL,WAAW;MACd,OAAO;QACL,GAAGQ,KAAK;QACRF,SAAS,EAAEG,MAAM,CAACE;MACpB,CAAC;IACD,KAAKV,eAAe;MACd,MAAM;QAAEkB,MAAM;QAAEC;MAAS,CAAC,GAAGX,MAAM,CAACE,OAAO,CAAC,CAAC;MAC7C,MAAMU,oBAAoB,GAAGb,KAAK,CAACJ,KAAK,CAACS,GAAG,CAAEC,IAAI,IAChDA,IAAI,CAACC,EAAE,KAAKI,MAAM,GAAG;QAAE,GAAGL,IAAI;QAAE,GAAGM;MAAS,CAAC,GAAGN,IAClD,CAAC;MAED,OAAO;QACL,GAAGN,KAAK;QACRJ,KAAK,EAAEiB;MACT,CAAC;IACT;MACE,OAAOb,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}