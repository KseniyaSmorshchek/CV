{"ast":null,"code":"var _s = $RefreshSig$();\n// UpdateNote.js\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { editNote, setUser } from '../redux/actions';\nfunction UpdateNote({\n  user\n}) {\n  _s();\n  const {\n    noteId\n  } = useParams();\n  const [note, setNote] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [errors, setErrors] = useState({});\n  const navigate = useNavigate();\n  const updateNote = () => {\n    if (validateInputs()) {\n      const updatedNote = {\n        id: noteId,\n        authorId: user.id,\n        title,\n        text: body,\n        createdAt: note.createdAt\n      };\n      fetch(`http://localhost:5001/notes/${noteId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedNote)\n      }).then(response => {\n        if (response.ok) {\n          dispatch(editNote(noteId, updatedNote)); // Dispatch the editNote action\n          navigate(`/view-note/${noteId}`);\n        } else {\n          console.error(\"Failed to update note\");\n        }\n      }).catch(error => {\n        console.error(\"Error updating note:\", error);\n      });\n    }\n  };\n\n  // ... (rest of your component)\n}\n_s(UpdateNote, \"/gbc3gm+iyXeh2b01lCEI3/ZdME=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = UpdateNote;\nconst mapStateToProps = state => ({\n  user: state.user\n});\nexport default connect(mapStateToProps)(UpdateNote);\nvar _c;\n$RefreshReg$(_c, \"UpdateNote\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","Link","connect","editNote","setUser","UpdateNote","user","_s","noteId","note","setNote","title","setTitle","body","setBody","errors","setErrors","navigate","updateNote","validateInputs","updatedNote","id","authorId","text","createdAt","fetch","method","headers","JSON","stringify","then","response","ok","dispatch","console","error","catch","_c","mapStateToProps","state","$RefreshReg$"],"sources":["/Users/markvadimov/Desktop/bsu/react/notion/src/routes/EditNote.jsx"],"sourcesContent":["// UpdateNote.js\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { editNote, setUser } from '../redux/actions';\r\n\r\nfunction UpdateNote({ user }) {\r\n  const { noteId } = useParams();\r\n  const [note, setNote] = useState(null);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n  const navigate = useNavigate();\r\n\r\n  const updateNote = () => {\r\n    if (validateInputs()) {\r\n      const updatedNote = {\r\n        id: noteId,\r\n        authorId: user.id,\r\n        title,\r\n        text: body,\r\n        createdAt: note.createdAt,\r\n      };\r\n\r\n      fetch(`http://localhost:5001/notes/${noteId}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(updatedNote),\r\n      })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            dispatch(editNote(noteId, updatedNote));  // Dispatch the editNote action\r\n            navigate(`/view-note/${noteId}`);\r\n          } else {\r\n            console.error(\"Failed to update note\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error updating note:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  // ... (rest of your component)\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(UpdateNote);\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,EAAEC,IAAI,QAAQ,kBAAkB;AAC/D,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,QAAQ,EAAEC,OAAO,QAAQ,kBAAkB;AAEpD,SAASC,UAAUA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAO,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAMmB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9B,MAAMkB,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIC,cAAc,CAAC,CAAC,EAAE;MACpB,MAAMC,WAAW,GAAG;QAClBC,EAAE,EAAEb,MAAM;QACVc,QAAQ,EAAEhB,IAAI,CAACe,EAAE;QACjBV,KAAK;QACLY,IAAI,EAAEV,IAAI;QACVW,SAAS,EAAEf,IAAI,CAACe;MAClB,CAAC;MAEDC,KAAK,CAAE,+BAA8BjB,MAAO,EAAC,EAAE;QAC7CkB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDd,IAAI,EAAEe,IAAI,CAACC,SAAS,CAACT,WAAW;MAClC,CAAC,CAAC,CACCU,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAACC,EAAE,EAAE;UACfC,QAAQ,CAAC9B,QAAQ,CAACK,MAAM,EAAEY,WAAW,CAAC,CAAC,CAAC,CAAE;UAC1CH,QAAQ,CAAE,cAAaT,MAAO,EAAC,CAAC;QAClC,CAAC,MAAM;UACL0B,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;QACxC;MACF,CAAC,CAAC,CACDC,KAAK,CAAED,KAAK,IAAK;QAChBD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;IACN;EACF,CAAC;;EAED;AACF;AAAC5B,EAAA,CAxCQF,UAAU;EAAA,QACEN,SAAS,EAKXC,WAAW;AAAA;AAAAqC,EAAA,GANrBhC,UAAU;AA0CnB,MAAMiC,eAAe,GAAIC,KAAK,KAAM;EAClCjC,IAAI,EAAEiC,KAAK,CAACjC;AACd,CAAC,CAAC;AAEF,eAAeJ,OAAO,CAACoC,eAAe,CAAC,CAACjC,UAAU,CAAC;AAAC,IAAAgC,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}