{"ast":null,"code":"var _s = $RefreshSig$();\n// Notes.js\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { deleteNote, setUser } from '../redux/actions';\nfunction Notes({\n  user\n}) {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const navigate = useNavigate();\n  const handleDeleteNote = async noteId => {\n    try {\n      const response = await fetch(`http://localhost:5001/notes/${noteId}`, {\n        method: \"DELETE\"\n      });\n      if (response.ok) {\n        dispatch(deleteNote(noteId)); // Dispatch the deleteNote action\n        setNotes(prevNotes => prevNotes.filter(note => note.id !== noteId));\n      } else {\n        console.error(\"Failed to delete note\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting note:\", error);\n    }\n  };\n\n  // ... (rest of your component)\n}\n_s(Notes, \"mKfCErf7B//v4jiR3E9hH+xNQsk=\", false, function () {\n  return [useNavigate];\n});\n_c = Notes;\nconst mapStateToProps = state => ({\n  user: state.user\n});\nexport default connect(mapStateToProps)(Notes);\nvar _c;\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Link","connect","deleteNote","setUser","Notes","user","_s","notes","setNotes","navigate","handleDeleteNote","noteId","response","fetch","method","ok","dispatch","prevNotes","filter","note","id","console","error","_c","mapStateToProps","state","$RefreshReg$"],"sources":["/Users/markvadimov/Desktop/bsu/react/notion/src/routes/Notes.jsx"],"sourcesContent":["// Notes.js\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { deleteNote, setUser } from '../redux/actions';\r\n\r\nfunction Notes({ user }) {\r\n  const [notes, setNotes] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  const handleDeleteNote = async (noteId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5001/notes/${noteId}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      if (response.ok) {\r\n        dispatch(deleteNote(noteId));  // Dispatch the deleteNote action\r\n        setNotes((prevNotes) => prevNotes.filter((note) => note.id !== noteId));\r\n      } else {\r\n        console.error(\"Failed to delete note\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting note:\", error);\r\n    }\r\n  };\r\n\r\n  // ... (rest of your component)\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Notes);\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,IAAI,QAAQ,kBAAkB;AACpD,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,UAAU,EAAEC,OAAO,QAAQ,kBAAkB;AAEtD,SAASC,KAAKA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAMW,gBAAgB,GAAG,MAAOC,MAAM,IAAK;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BF,MAAO,EAAC,EAAE;QACpEG,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAIF,QAAQ,CAACG,EAAE,EAAE;QACfC,QAAQ,CAACd,UAAU,CAACS,MAAM,CAAC,CAAC,CAAC,CAAE;QAC/BH,QAAQ,CAAES,SAAS,IAAKA,SAAS,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKT,MAAM,CAAC,CAAC;MACzE,CAAC,MAAM;QACLU,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;;EAED;AACF;AAAChB,EAAA,CArBQF,KAAK;EAAA,QAEKL,WAAW;AAAA;AAAAwB,EAAA,GAFrBnB,KAAK;AAuBd,MAAMoB,eAAe,GAAIC,KAAK,KAAM;EAClCpB,IAAI,EAAEoB,KAAK,CAACpB;AACd,CAAC,CAAC;AAEF,eAAeJ,OAAO,CAACuB,eAAe,CAAC,CAACpB,KAAK,CAAC;AAAC,IAAAmB,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}